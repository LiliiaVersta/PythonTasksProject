# Декоратор с аргументом, который будет умножать результат функции
def multiply_decorator(factor):
    # Этот декоратор принимает функцию и изменяет её поведение
    def decorator(func):
        # Обёртка, которая вызывает оригинальную функцию и изменяет её результат
        def wrapper():
            result = func()  # Вызываем функцию, которую декорируем
            return result * factor  # Умножаем её результат на переданный множитель
        return wrapper  # Возвращаем обёрнутую функцию
    return decorator  # Возвращаем сам декоратор

# Используем наш декоратор, передавая множитель 2
# Декораторы — это функции высшего порядка, которые принимают другую функцию, модифицируют её поведение и возвращают новую функцию.
@multiply_decorator(2)
def get_price():
    return 50  # Просто возвращаем число 50

# Вызываем функцию и выводим результат
print(get_price())  # Ожидаемый вывод: 100
